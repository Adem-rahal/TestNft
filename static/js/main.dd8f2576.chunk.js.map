{"version":3,"sources":["img/1.png","img/2.png","img/3.png","img/4.png","img/5.png","img/6.png","img/7.png","img/8.png","img/9.png","img/10.png","App.js","reportWebVitals.js","index.js"],"names":["MerkleTree","require","keccak256","tokens","GGaddress","App","useState","error","setError","data","setData","fetchData","a","window","ethereum","request","method","provider","ethers","providers","Web3Provider","contract","Contract","GreedyGeese","abi","pricePresale","cost","totalSupply","object","String","message","accounts","signer","getSigner","tab","map","token","push","address","leaves","tree","sort","getHexRoot","leaf","getHexProof","overrides","from","value","saleMint","transaction","wait","useEffect","className","src","img1","alt","img2","img3","img4","img5","img6","img7","img8","img9","img10","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd8f2576.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/1.338bb4ec.png\";","export default __webpack_public_path__ + \"static/media/2.179b2680.png\";","export default __webpack_public_path__ + \"static/media/3.427a3801.png\";","export default __webpack_public_path__ + \"static/media/4.bef7c551.png\";","export default __webpack_public_path__ + \"static/media/5.340368fe.png\";","export default __webpack_public_path__ + \"static/media/6.ecff6255.png\";","export default __webpack_public_path__ + \"static/media/7.2590ebe0.png\";","export default __webpack_public_path__ + \"static/media/8.fd83afd3.png\";","export default __webpack_public_path__ + \"static/media/9.ea881925.png\";","export default __webpack_public_path__ + \"static/media/10.edefd7cc.png\";","import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport GreedyGeese from './artifacts/contracts/Minaschildren.sol/MinasChildren.json';\nimport './App.css';\nimport img1 from './img/1.png';\nimport img2 from './img/2.png';\nimport img3 from './img/3.png';\nimport img4 from './img/4.png';\nimport img5 from './img/5.png';\nimport img6 from './img/6.png';\nimport img7 from './img/7.png';\nimport img8 from './img/8.png';\nimport img9 from './img/9.png';\nimport img10 from './img/10.png';\n\nconst { MerkleTree } = require(\"merkletreejs\");\nconst keccak256 = require(\"keccak256\");\nconst tokens = require(\"./tokens.json\");\n\nconst GGaddress = \"0x927b6649eEA51319D33dEC14dda988C3cB26D363\";\n\nfunction App() {\n\n  const [error, setError] = useState('');\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    fetchData();\n  }, [])\n\n  async function fetchData() {\n    if(typeof window.ethereum !== 'undefined') {\n      let accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(GGaddress, GreedyGeese.abi, provider);\n      try {\n        const cost = await contract.pricePresale();\n        const totalSupply = await contract.totalSupply();\n        const object = {\"cost\": String(cost), \"totalSupply\": String(totalSupply)}\n        setData(object);\n      }\n      catch(err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function mint() {\n    if(typeof window.ethereum !== 'undefined') {\n      let accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(GGaddress, GreedyGeese.abi, signer);\n      \n      let tab = [];\n      tokens.map((token) => {\n        tab.push(token.address);\n      });\n      const leaves = tab.map((address) => keccak256(address));\n      const tree = new MerkleTree(leaves, keccak256, { sort: true });\n      const root = tree.getHexRoot();\n      const leaf = keccak256(accounts[0]);\n      const proof = tree.getHexProof(leaf);\n\n      try {\n        let overrides = {\n          from: accounts[0],\n          value: data.cost\n        }\n        const transaction = await contract.saleMint( 1, overrides);\n        await transaction.wait();\n        fetchData();\n      }\n      catch(err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"banniere\">\n          <img src={img1} alt=\"img\" />\n          <img src={img2} alt=\"img\" />\n          <img src={img3} alt=\"img\" />\n          <img src={img4} alt=\"img\" />\n          <img src={img5} alt=\"img\" />\n          <img src={img6} alt=\"img\" />\n          <img src={img7} alt=\"img\" />\n          <img src={img8} alt=\"img\" />\n          <img src={img9} alt=\"img\" />\n          <img src={img10} alt=\"img\" />\n        </div>\n        {error && <p>{error}</p>}\n        <h1>Mint a MinasChildren NFT !</h1>\n        <p className=\"count\">{data.totalSupply} / 50</p>\n        <p className=\"cost\">Each MinasChildren NFT costs {data.cost / 10**18} eth (excluding gas fees)</p>\n        <button onClick={mint}>BUY one MinasChildren NFT</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}